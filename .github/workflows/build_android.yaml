name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'Android/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Android/**'

jobs:
  build_apk:
    name: Build Android APK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Android/src
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 11076708
          log-accepted-android-sdk-licenses: false
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew
      
      - name: Build Debug APK
        run: |
          echo "=== Building Debug APK ==="
          echo "Current working directory: $(pwd)"
          echo "Repository root: $GITHUB_WORKSPACE"
          
          ./gradlew assembleDebug --info
          
          echo "=== Build completed, checking outputs ==="
          echo "Gradle build status: $?"
          
          # List all build outputs with absolute paths
          echo "Build directories created:"
          find . -name "build" -type d
          
          echo "APK search in expected location:"
          ls -la app/build/outputs/apk/debug/ || echo "Debug APK directory not found"
          
          # Also check from repository root perspective
          echo "Checking from repository root:"
          ls -la $GITHUB_WORKSPACE/Android/src/app/build/outputs/apk/debug/ || echo "APK directory not found from repo root"
          
          # Copy APK to a predictable location for later steps
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "Copying APK to predictable location..."
            mkdir -p $GITHUB_WORKSPACE/apk-output
            cp app/build/outputs/apk/debug/app-debug.apk $GITHUB_WORKSPACE/apk-output/
            echo "APK copied to: $GITHUB_WORKSPACE/apk-output/app-debug.apk"
            ls -la $GITHUB_WORKSPACE/apk-output/
          else
            echo "APK not found for copying"
          fi
      
      - name: Generate release info
        id: release_info
        run: |
          # Get current date and time
          CURRENT_DATE=$(date +'%Y-%m-%d %H:%M:%S UTC')
          
          # Get commit info
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          
          # Generate tag name with timestamp
          TAG_NAME="debug-$(date +'%Y%m%d-%H%M%S')"
          
          RELEASE_NAME="Debug Build - $CURRENT_DATE"
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "build_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
      
      - name: Debug build output structure
        run: |
          echo "=== Debugging build output structure ==="
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for build directories:"
          find . -name "build" -type d
          echo ""
          echo "Looking for any APK files:"
          find . -name "*.apk" -type f
          echo ""
          echo "Checking predictable APK location:"
          ls -la $GITHUB_WORKSPACE/apk-output/ || echo "Predictable APK location not found"
          echo ""
          echo "Contents of app directory:"
          ls -la app/ || echo "app directory not found"
          echo ""
          if [ -d "app/build" ]; then
            echo "Contents of app/build:"
            find app/build -type f -name "*.apk" || echo "No APK files found in app/build"
          else
            echo "app/build directory does not exist"
          fi

      - name: Find Debug APK
        id: find_apk
        run: |
          echo "=== Searching for APK files ==="
          
          # Try multiple possible locations for the APK
          APK_PATH=""
          
          # Check predictable location first
          if [ -f "$GITHUB_WORKSPACE/apk-output/app-debug.apk" ]; then
            APK_PATH="$GITHUB_WORKSPACE/apk-output/app-debug.apk"
            echo "Found APK at predictable location: $APK_PATH"
          fi
          
          # Fallback to standard build location (relative to working directory)
          if [ -z "$APK_PATH" ] && [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
            echo "Found APK at standard location: $APK_PATH"
          fi
          
          # Try absolute path from repository root  
          if [ -z "$APK_PATH" ] && [ -f "$GITHUB_WORKSPACE/Android/src/app/build/outputs/apk/debug/app-debug.apk" ]; then
            APK_PATH="$GITHUB_WORKSPACE/Android/src/app/build/outputs/apk/debug/app-debug.apk"
            echo "Found APK at absolute path: $APK_PATH"
          fi
          
          # Last resort: search everywhere
          if [ -z "$APK_PATH" ]; then
            echo "APK not found in expected locations, searching everywhere..."
            APK_PATH=$(find . -name "*.apk" -type f | head -1)
            if [ -n "$APK_PATH" ]; then
              echo "Found APK at: $APK_PATH"
            else
              echo "No APK files found anywhere!"
              echo "Build output structure:"
              find . -name "build" -type d -exec ls -la {} \; || echo "No build directories found"
              echo "Complete directory tree:"
              find . -type d | head -20
              echo "All files in project:"
              find . -type f | grep -E '\.(apk|aab)$' || echo "No APK or AAB files found"
              exit 1
            fi
          fi
          
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          
          # Get APK size for release notes
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
          
          # Generate APK filename with version info
          APK_FILENAME="ai-edge-gallery-debug-${{ steps.release_info.outputs.commit_sha }}.apk"
          echo "apk_filename=$APK_FILENAME" >> $GITHUB_OUTPUT
      
      - name: Prepare APK for release
        if: success() && steps.find_apk.outputs.apk_path != ''
        run: |
          echo "=== Preparing APK for release ==="
          APK_PATH="${{ steps.find_apk.outputs.apk_path }}"
          APK_FILENAME="${{ steps.find_apk.outputs.apk_filename }}"
          
          echo "Original APK path: $APK_PATH"
          echo "Target APK filename: $APK_FILENAME"
          
          # Copy APK to a predictable location with the desired filename
          cp "$APK_PATH" "./$APK_FILENAME"
          
          echo "APK copied to: ./$APK_FILENAME"
          echo "Verifying APK file exists:"
          ls -la "./$APK_FILENAME"

      - name: Create Release and Upload APK
        uses: softprops/action-gh-release@v2
        if: success() && steps.find_apk.outputs.apk_path != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          draft: false
          prerelease: true
          files: |
            ${{ steps.find_apk.outputs.apk_filename }}
          body: |
            ## üöÄ AI Edge Gallery Debug Build
            
            **Build Information:**
            - üìÖ Built on: ${{ steps.release_info.outputs.build_date }}
            - üìù Commit: `${{ steps.release_info.outputs.commit_sha }}`
            - üí¨ Message: ${{ steps.release_info.outputs.commit_msg }}
            - üì¶ APK Size: ${{ steps.find_apk.outputs.apk_size }}
            
            **Installation:**
            1. Download the APK file below
            2. Enable "Install from Unknown Sources" in Android settings
            3. Install the APK on your Android device (API 31+)
            
            **Note:** This is a debug build intended for testing purposes.
            
            ---
            *Auto-generated by GitHub Actions*

      - name: Create Release without APK (fallback)
        uses: softprops/action-gh-release@v2
        if: failure() || steps.find_apk.outputs.apk_path == ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: "${{ steps.release_info.outputs.release_name }} (Build Failed)"
          draft: false
          prerelease: true
          body: |
            ## ‚ùå AI Edge Gallery Debug Build (Failed)
            
            **Build Information:**
            - üìÖ Built on: ${{ steps.release_info.outputs.build_date }}
            - üìù Commit: `${{ steps.release_info.outputs.commit_sha }}`
            - üí¨ Message: ${{ steps.release_info.outputs.commit_msg }}
            
            **Error:** APK file could not be found after build completion.
            
            This release contains only source code. The APK build may have failed or 
            the APK output path may be incorrect in the workflow.
            
            ---
            *Auto-generated by GitHub Actions*
